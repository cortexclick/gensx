name: "🐢 Lint and Test"

on:
  pull_request_target:
    types: [opened, synchronize, reopened]
    branches: [main]
    paths:
      - "packages/**/*"
  push:
    branches: [main]
    paths:
      - "packages/**/*"

permissions:
  contents: read
  checks: write
  pull-requests: write

jobs:
  build:
    runs-on: ubuntu-latest
    # Important security check for pull_request_target
    if: |
      (github.event_name == 'push') ||
      (github.event_name == 'pull_request_target' && github.event.pull_request.head.repo.full_name == github.repository)

    strategy:
      fail-fast: false
      matrix:
        node-version: [22.x, 20.x, 18.x]

    steps:
      - name: Checkout 🛬
        uses: actions/checkout@v4
        with:
          # Important: For PR events, explicitly checkout the PR HEAD
          ref: ${{ github.event_name == 'pull_request_target' && format('refs/pull/{0}/head', github.event.pull_request.number) || github.ref }}
          persist-credentials: false
      - name: Setup Node ⚙️
        uses: ./.github/actions/setup-node
        with:
          version: ${{ matrix.node-version }}
          npm_token: ${{ secrets.NPM_TOKEN }}
      - name: Build 📦
        run: pnpm build
      - name: Lint code 💅
        run: pnpm lint
      - name: Run tests with coverage 📊
        id: coverage
        run: |
          OUTPUT=$(pnpm test --coverage)
          COVERAGE_REPORT=$(echo "$OUTPUT" | grep -A 10 "^--------------------|---------|----------|---------|---------|-------------------$")
          COVERAGE_REPORT="${COVERAGE_REPORT//'%'/'%25'}"
          COVERAGE_REPORT="${COVERAGE_REPORT//$'\n'/'%0A'}"
          COVERAGE_REPORT="${COVERAGE_REPORT//$'\r'/'%0D'}"
          echo "report=$COVERAGE_REPORT" >> $GITHUB_OUTPUT

      - name: Comment on PR 💬
        if: github.event_name == 'pull_request_target' && matrix.node-version == '20.x'
        uses: actions/github-script@v7
        with:
          script: |
            const coverageReport = `### Test Coverage Report 📊

            \`\`\`
            ${{ steps.coverage.outputs.report }}
            \`\`\`
            `;

            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('Test Coverage Report')
            );

            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: coverageReport
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: coverageReport
              });
            }
